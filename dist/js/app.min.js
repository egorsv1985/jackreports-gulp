/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst ctx = document.getElementById('graph_activation');\r\nChart.defaults.font.size = 18;\r\n// Chart.defaults.global.defaultFontSize = 18;\r\n// сhart.defaults.plugins.legend.display = false;\r\nChart.defaults.plugins.legend.d\r\nconst myChart = new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n        labels: ['Jun', 'Dec', 'Nov', 'Oct', 'Sep', 'Aug'],\r\n        datasets: [\r\n            /* Параметры первой таблицы для IOS*/\r\n            {\r\n                label: '',\r\n                data: [11, 11, 11, 11, 11, 11],\r\n                backgroundColor: [\r\n                    '#0073FF',\r\n                ],\r\n                borderColor: [\r\n                    '#0073FF',\r\n                ],\r\n                borderWidth: 1\r\n            },\r\n            /* Параметры первой таблицы для Android*/\r\n            {\r\n                label: '',\r\n                data: [7, 7, 7, 7, 7, 7],\r\n                backgroundColor: [\r\n                    '#009E8B',\r\n                ],\r\n                borderColor: [\r\n                    '#009E8B',\r\n                ],\r\n                borderWidth: 1,\r\n\r\n            },\r\n\r\n        ],\r\n\r\n    },\r\n    options: {\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n                labels: {\r\n                    // This more specific font property overrides the global property\r\n                    font: {\r\n                        size: 16\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\n\r\nlet ctx2 = document.getElementById('graph_retention');\r\nlet chart = new Chart(ctx2, {\r\n    type: 'line',\r\n    data: {\r\n        labels: ['1m', '2m', '4m', '6m', '8m', '10m', '12m'],\r\n        datasets: [{ // График зелёного цвета\r\n                label: '',\r\n                backgroundColor: 'transparent',\r\n                borderColor: 'green',\r\n                data: [70, 60, 60, 50, 40, 30, 20],\r\n            },\r\n            { // График синего цвета\r\n                label: '',\r\n                // backgroundColor: 'transparent',\r\n                borderColor: 'blue',\r\n                data: [90, 80, 80, 70, 60, 50, 40]\r\n            }\r\n        ],\r\n    },\r\n    options: {\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n\r\n                labels: {\r\n                    // This more specific font property overrides the global property\r\n                    font: {\r\n                        size: 16\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n    },\r\n});\r\n\r\n// var popCanvas = document.getElementById(\"popChart\");\r\n\r\n// Chart.defaults.global.defaultFontFamily = \"Lato\";\r\n// Chart.defaults.global.defaultFontSize = 18;\r\n// Chart.defaults.global.defaultFontColor = 'blue';\r\n\r\n// var barChart = new Chart(popCanvas, {\r\n//   type: 'bar',\r\n//   data: {\r\n//     labels: [\"China\", \"India\", \"United States\", \"Indonesia\", \"Brazil\", \"Pakistan\", \"Nigeria\", \"Bangladesh\", \"Russia\", \"Japan\"],\r\n//     datasets: [{\r\n//       label: 'Population',\r\n//       data: [1379302771, 1281935911, 326625791, 260580739, 207353391, 204924861, 190632261, 157826578, 142257519, 126451398],\r\n//       backgroundColor: [\r\n//         'rgba(255, 99, 132, 0.6)',\r\n//         'rgba(54, 162, 235, 0.6)',\r\n//         'rgba(255, 206, 86, 0.6)',\r\n//         'rgba(75, 192, 192, 0.6)',\r\n//         'rgba(153, 102, 255, 0.6)',\r\n//         'rgba(255, 159, 64, 0.6)',\r\n//         'rgba(255, 99, 132, 0.6)',\r\n//         'rgba(54, 162, 235, 0.6)',\r\n//         'rgba(255, 206, 86, 0.6)',\r\n//         'rgba(75, 192, 192, 0.6)',\r\n//         'rgba(153, 102, 255, 0.6)'\r\n//       ]\r\n//     }]\r\n//   },\r\n//   options: {\r\n\r\n//   }\r\n// });\n\n//# sourceURL=webpack://gulp-template/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;